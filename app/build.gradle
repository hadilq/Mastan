/**
 * Copyright 2023 Hadi Lashkari Ghouchani
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.jetbrains.kotlin.gradle.tasks.KaptGenerateStubs

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.anvil)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.firebase.crashlytics)
}

android {
    signingConfigs {
        release {
            storeFile file('/Users/***/keystore')
        }
    }
    namespace 'com.hadilq.mastan'
    compileSdk 33

    defaultConfig {
        applicationId "com.hadilq.mastan"
        minSdk 24
        targetSdk 33
        versionCode 17
        versionName "0.0.17"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.androidxComposeCompiler.get()
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

tasks.withType(KaptGenerateStubs).configureEach {
    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {
    implementation(projects.legacy)
    implementation(projects.theme.io)
    implementation(projects.theme.impl)
    implementation(projects.splash.io)
    implementation(projects.splash.impl)
    implementation(platform(libs.androidx.compose.bom))
    implementation(platform(libs.google.firebase.bom))
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.material)
    implementation(libs.google.firebase.analytics)
    implementation(libs.google.firebase.crashlytics)
    kapt(libs.dagger.compiler)
    debugImplementation(libs.androidx.compose.ui.test.manifest)
    debugImplementation(libs.androidx.compose.ui.tooling)
    implementation(libs.androidx.compose.ui.tooling.preview)
    implementation(libs.androidx.compose.ui)
    implementation(libs.androidx.compose.foundation)
    implementation(libs.me.saket.swipe)
    implementation(libs.androidx.activity.activity.compose)
    implementation(libs.androidx.compose.material3)
    implementation(libs.androidx.core.core.ktx)
    implementation(libs.androidx.datastore)
    implementation(libs.androidx.lifecycle.lifecycle.runtime.ktx)
    implementation(libs.androidx.lifecycle.lifecycle.runtime.compose)
    implementation(libs.com.google.dagger)
    implementation(libs.com.squareup.retrofit2.retrofit)
    implementation(libs.de.charlex.compose.revealswipe)
    implementation(libs.coil.compose)
    implementation(libs.com.jakewharton.retrofit)
    implementation(libs.com.squareup.okhttp3.logging.interceptor)
    implementation(libs.com.squareup.okhttp3.okhttp)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.browser)
    implementation(libs.store.cache)
    implementation(libs.store.jvm)
    implementation(libs.androidx.paging.compose)
    implementation(libs.retained.compose)
    implementation(libs.androidx.nav.compose)
    implementation(libs.accompanist.pager)
    implementation(libs.accompanist.pager.indicators)
    implementation(libs.kotlin.datetime)
    implementation(libs.me.saket.zoomable)
    implementation(libs.me.saket.zoomable.coil)

    // If using indicators, also depend on
    api(libs.atomicfu)

    testImplementation(libs.coroutines.test)
    testImplementation(libs.junit)
    testImplementation(libs.assertj)

    androidTestImplementation(libs.coroutines.test)
    androidTestImplementation(libs.junit)
    androidTestImplementation(libs.assertj)
    androidTestImplementation(libs.androidx.compose.ui.test.junit4)
    androidTestImplementation(libs.espresso)
    androidTestImplementation(libs.junit.ext)

    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.room.paging)
    kapt(libs.androidx.room.compiler)

    implementation libs.accompanist.navigation.animation
    implementation libs.accompanist.navigation.material
    implementation libs.accompanist.placeholder
    implementation libs.exoplayer
    implementation libs.coil.gif
    implementation libs.coil.video
    implementation libs.patrykandpatrick
}
